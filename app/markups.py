from aiogram.types import (ReplyKeyboardMarkup, KeyboardButton,
                           InlineKeyboardMarkup, InlineKeyboardButton)
from aiogram.utils.keyboard import InlineKeyboardBuilder
import programmConsts.murkupCaptionConst as markupCaption
from models.caseModel import Case
from typing import List, Tuple

#_________USER MAIN MENU MARKUPS__________ 

mainMenuMarkupUser = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text=markupCaption.MainMenuMarkupText.SEND_REPORT.value)],
                                               [KeyboardButton(text=markupCaption.MainMenuMarkupText.MY_REPORTS.value)],
                                               [KeyboardButton(text=markupCaption.MainMenuMarkupText.HELP.value)],
                                               [KeyboardButton(text=markupCaption.MainMenuMarkupText.CONTACTS.value)]], 
                                               resize_keyboard=True,)
#____________________________________

#______ADMINISTRATOR MAIN MENU ______________
mainMenuMarkupAdministrator = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text=markupCaption.AdministratorMenuMarkupText.STATISTICS.value)],
                                               [KeyboardButton(text=markupCaption.AdministratorMenuMarkupText.REPORTS.value)],
                                               [KeyboardButton(text=markupCaption.AdministratorMenuMarkupText.USERS.value)],
                                               [KeyboardButton(text=markupCaption.AdministratorMenuMarkupText.SETTINGS.value)]], 
                                               resize_keyboard=True,)
#____________________________________

#______MODERATOR MAIN MENU ______________
mainMenuMarkupModerator = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text=markupCaption.ModeratorMenuMarkupsText.STATISTICS.value)],
                                               [KeyboardButton(text=markupCaption.ModeratorMenuMarkupsText.ACTIVE_REPORTS.value)],
                                               [KeyboardButton(text=markupCaption.ModeratorMenuMarkupsText.IN_PROGRESS_REPORTS.value)]], 
                                               resize_keyboard=True,)
#____________________________________

#______EXECUTOR MAIN MENU ______________
mainMenuMarkupExecutor = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text=markupCaption.ExecutorMenuMarkupsText.STATISTICS.value)],
                                               [KeyboardButton(text=markupCaption.ExecutorMenuMarkupsText.ACTIVE_REPORTS.value)],
                                               [KeyboardButton(text=markupCaption.ExecutorMenuMarkupsText.WORK_TIME.value)],
                                               [KeyboardButton(text=markupCaption.ExecutorMenuMarkupsText.MODERATOR_CALL.value,)]], 
                                               resize_keyboard=True,)
#____________________________________

#______REGISTRATION MENU ______________
RegistrationMenuYesNo = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text=markupCaption.YesNoAnswerMarkupText.YES.value)],
                                               [KeyboardButton(text=markupCaption.YesNoAnswerMarkupText.NO.value)]],
                                               resize_keyboard=True,)
#____________________________________

RequestLocationMenu = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text=markupCaption.LocationMarkupText.GET_LOCATION.value, request_location=True)]],
                                               resize_keyboard=True,)

#–ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ö–æ—á–µ—Ç –ª–∏ –æ–Ω –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É
async def answer_send_report():
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text=markupCaption.YesNoAnswerMarkupText.YES, callback_data='set_state_send_report'),
                 InlineKeyboardButton(text=markupCaption.YesNoAnswerMarkupText.NO, callback_data='back_to_main_menu'))

    return keyboard.adjust(2).as_markup()

#–ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é
async def anser_get_location():
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text=markupCaption.YesNoAnswerMarkupText.YES, callback_data='get_location'),
                 InlineKeyboardButton(text=markupCaption.YesNoAnswerMarkupText.NO, callback_data='next_step_report_location'))

    return keyboard.adjust(2).as_markup()

#–ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –∫ –∑–∞—è–≤–∫–µ
async def anser_get_photo():
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text=markupCaption.YesNoAnswerMarkupText.YES, callback_data='get_photo'),
                 InlineKeyboardButton(text=markupCaption.YesNoAnswerMarkupText.NO, callback_data='next_step_report_photo'))

    return keyboard.adjust(2).as_markup()

async def user_cases_markups(
    cases: List[Case],
    page: int = 0,
    items_per_page: int = 5) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    
    Args:
        cases: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫
        page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0)
        items_per_page: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–æ–º–ø–∞–∫—Ç–Ω–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    """
    keyboard = InlineKeyboardBuilder()
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    total_pages = (len(cases) + items_per_page - 1) // items_per_page
    page_cases = cases[page*items_per_page : (page+1)*items_per_page]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫–∏ (–ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫—É)
    for case in page_cases:
        keyboard.row(InlineKeyboardButton(
            text=case.name,
            callback_data=f"case_detail_{case.id}"
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    if len(cases) > items_per_page:
        pagination_buttons = []
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        if page > 0:
            pagination_buttons.append(
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data=f"cases_page_{page-1}"
                ))
        
        # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥" –µ—Å–ª–∏ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        if page < total_pages - 1:
            pagination_buttons.append(
                InlineKeyboardButton(
                    text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
                    callback_data=f"cases_page_{page+1}"
                ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        if pagination_buttons:
            keyboard.row(*pagination_buttons)
    
    # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–µ–≥–¥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    keyboard.row(
        InlineKeyboardButton(
            text="‚ùå –ó–∞–∫—Ä—ã—Ç—å",
            callback_data="close_cases_list"
        ))
    
    return keyboard.as_markup()

async def inline_case_detail_markup(page: int) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–∫–∏
    """
    keyboard = InlineKeyboardBuilder()
    
    keyboard.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
            callback_data=f"cases_page_{page}"
        ),
        InlineKeyboardButton(
            text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            callback_data="back_to_main_menu"
        )
    )
    
    return keyboard.as_markup()